# create docker network for kong
networks:
  kong-net:
    external: false

# re-usable kong configuration
x-kong-config:
  &kong-env
  KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
  KONG_PG_HOST: kong-database
  KONG_PG_USER: ${KONG_PG_USER:-kong}
  KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}

volumes:
  kong_data: {}
  konga_data: {}

services:
  kong-database:
    image: postgres:17.2
    container_name: kong-database
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD:-kong}
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-d",
          "${KONG_PG_DATABASE:-kong}",
          "-U",
          "${KONG_PG_USER:-kong}"
        ]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    networks:
      - kong-net
    volumes:
      - kong_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  konga-database:
    image: postgres:11
    container_name: konga-database
    environment:
      POSTGRES_DB: konga
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-d",
          "konga",
          "-U",
          "kong"
        ]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    networks:
      - kong-net
    volumes:
      - konga_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"

  kong-migrations:
    image: kong:3.9
    container_name: kong-migrations
    command: kong migrations bootstrap && kong migrations up && kong migrations finish
    depends_on:
      - kong-database
    environment:
      <<: *kong-env
    networks:
      - kong-net
    restart: on-failure

  kong:
    # build: .
    image: kong:3.9
    container_name: kong
    user: "${KONG_USER:-kong}"
    environment:
      <<: *kong-env
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:8443 ssl
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_ADMIN_GUI_LISTEN: "${KONG_ADMIN_GUI_LISTEN:-0.0.0.0:8002}"
      KONG_LOG_LEVEL: info
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      # KONG_DATABASE: off
      # KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yaml"
    networks:
      - kong-net
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
      - "8002:8002"
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure
    volumes:
      - ./kong.yml:/opt/kong/kong.yaml

  konga:
    image: pantsel/konga:latest
    platform: linux/amd64
    container_name: konga
    environment:
      DB_ADAPTER: postgres
      DB_HOST: host.docker.internal
      DB_PORT: 5433
      DB_USER: kong
      DB_PASSWORD: kong
      DB_DATABASE: konga
    networks:
      - kong-net
    ports:
      - "1337:1337"
    restart: on-failure

  user.service.local:
    container_name: user-service
    build: ./mock-server/users
    networks:
      - kong-net
    ports:
      - "8080:8080"
    restart: on-failure

  product.service.local:
    container_name: product-service
    build: ./mock-server/products
    networks:
      - kong-net
    ports:
      - "8081:8081"
    restart: on-failure